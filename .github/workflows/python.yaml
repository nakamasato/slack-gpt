name: python
on:
  push:
    branches:
      - main
  pull_request:
  release:
    types: [published]

concurrency:
  group: ${{ github.ref }}
  cancel-in-progress: true

env:
  COMMENT_BODY_IDENTIFIER: Pytest Coverage Comment
  PROJECT: di-sandbox-347523
  REGION: asia-northeast1
  WORKLOAD_IDENTITY_PROVIDER: projects/383658452402/locations/global/workloadIdentityPools/github/providers/github-provider
  SERVICE_ACCOUNT: github-actions@di-sandbox-347523.iam.gserviceaccount.com

permissions:
  contents: write
  pull-requests: write

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          persist-credentials: false

      - name: Set up Python & Poetry
        uses: ./.github/actions/setup-poetry

      - name: test
        run: |
          set -o pipefail
          poetry run pytest | tee pytest-coverage.txt

      - name: find comment
        if: github.event_name == 'pull_request'
        uses: peter-evans/find-comment@v3
        id: fc
        with:
          issue-number: ${{ github.event.number }}
          body-includes: ${{ env.COMMENT_BODY_IDENTIFIER }}

      - name: delete comment
        if: github.event_name == 'pull_request' && steps.fc.outputs.comment-id != 0
        uses: jungwinter/comment@v1
        with:
          type: delete
          comment_id: ${{ steps.fc.outputs.comment-id }}
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: pytest coverage comment
        if: github.event_name == 'pull_request'
        id: pytest-coverage-comment
        uses: MishaKav/pytest-coverage-comment@main
        with:
          pytest-coverage-path: pytest-coverage.txt
          junitxml-path: pytest.xml
          coverage-path-prefix: .

  build:
    needs:
      - test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python & Poetry
        uses: ./.github/actions/setup-poetry

      - name: export requirements.txt
        run: poetry export -f requirements.txt --output requirements.txt

      - name: Set config
        id: set_config
        run: |
          REPO=slack-gpt
          if [ "$GITHUB_EVENT_NAME" == "pull_request" ]; then
            REPO=slack-gpt-dev
            LATEST_SHA="${{ github.event.pull_request.head.sha }}"
            TAGS="pr-${{ github.event.number }}-${LATEST_SHA:0:7}"
          elif [ "$GITHUB_EVENT_NAME" == "push" ]; then
            REPO=slack-gpt
            TAGS="${GITHUB_SHA:0:7}"
          elif [ "$GITHUB_EVENT_NAME" == "release" ]; then
            TAGS="$GITHUB_REF_NAME"
          fi
          echo "TAGS=$TAGS" >> "$GITHUB_OUTPUT"
          echo "REPO=$REPO" >> "$GITHUB_OUTPUT"

      - name: Authenticate to Google Cloud
        id: auth
        uses: google-github-actions/auth@v1
        with:
          token_format: access_token
          workload_identity_provider: ${{ env.WORKLOAD_IDENTITY_PROVIDER }}
          service_account: ${{ env.SERVICE_ACCOUNT }}

      - name: Login to GAR
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGION }}-docker.pkg.dev
          username: oauth2accesstoken
          password: ${{ steps.auth.outputs.access_token }}

      - name: Install Pack CLI
        uses: buildpacks/github-actions/setup-pack@v5.6.0

      - name: Build app with pack CLI using Buildpack Cache image (see https://buildpacks.io/docs/app-developer-guide/using-cache-image/) & publish to Docker Hub
        run: |
          pack build "${{ env.REGION }}-docker.pkg.dev/cloud-run-source-deploy/${{ steps.set_config.outputs.REPO }}:${{ steps.set_config.outputs.TAGS }}" \
              --tag "${{ env.REGION }}-docker.pkg.dev/cloud-run-source-deploy/${{ steps.set_config.outputs.REPO }}:latest" \
              --path . \
              --builder heroku/builder:22 \
              --cache-image "${{ env.REGION }}-docker.pkg.dev/cloud-run-source-deploy/${{ steps.set_config.outputs.REPO }}-cache:latest" \
              --publish
